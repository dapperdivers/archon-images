name: Build and Push Archon Images

permissions:
  contents: read
  packages: write
  security-events: write
  attestations: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      archon_ref:
        description: 'Archon repository ref (tag, branch, or commit)'
        required: false
        default: 'main'
        type: string
  schedule:
    # Check for new commits to main daily at 6 AM UTC
    - cron: '0 6 * * *'
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - 'scripts/**'

env:
  REGISTRY: ghcr.io
  UPSTREAM_REPO: coleam00/Archon

jobs:
  check-commits:
    runs-on: ubuntu-latest
    outputs:
      latest_commit: ${{ steps.check.outputs.latest_commit }}
      should_build: ${{ steps.check.outputs.should_build }}
      target_ref: ${{ steps.check.outputs.target_ref }}
    steps:
      - name: Check latest commit
        id: check
        run: |
          # Get latest commit SHA from upstream main branch
          LATEST_COMMIT=$(gh api repos/${{ env.UPSTREAM_REPO }}/commits/main --jq '.sha' 2>/dev/null || echo "")
          
          # If we can't get the commit, use main branch
          if [ -z "$LATEST_COMMIT" ]; then
            LATEST_COMMIT="main"
            echo "Could not get latest commit, using main branch"
          else
            echo "Latest commit on main: $LATEST_COMMIT"
          fi
          
          # Check if we have a manual input
          if [ -n "${{ github.event.inputs.archon_ref }}" ]; then
            TARGET_REF="${{ github.event.inputs.archon_ref }}"
            SHOULD_BUILD="true"
            echo "Manual trigger with ref: $TARGET_REF"
          else
            TARGET_REF="$LATEST_COMMIT"
            
            # Check if we already built this commit (use short SHA for tag)
            SHORT_SHA=$(echo "$LATEST_COMMIT" | cut -c1-7)
            IMAGE_EXISTS=$(gh api /user/packages/container/archon-server/versions --paginate --jq '.[] | select(.metadata.container.tags[] | contains("'$SHORT_SHA'")) | .metadata.container.tags[]' 2>/dev/null | head -1 || echo "")
            
            if [ -n "$IMAGE_EXISTS" ]; then
              SHOULD_BUILD="false"
              echo "Image for commit $SHORT_SHA already exists: $IMAGE_EXISTS"
            else
              SHOULD_BUILD="true"
              echo "New commit found: $SHORT_SHA"
            fi
          fi
          
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "target_ref=$TARGET_REF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-images:
    needs: check-commits
    if: needs.check-commits.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - name: server
            dockerfile: python/Dockerfile.server
            context: python
          - name: mcp
            dockerfile: python/Dockerfile.mcp
            context: python
          - name: agents
            dockerfile: python/Dockerfile.agents
            context: python
          - name: frontend
            dockerfile: Dockerfile
            context: archon-ui-main
    steps:
      - name: Checkout upstream Archon repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ needs.check-commits.outputs.target_ref }}
          path: archon-source

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/archon-${{ matrix.component.name }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.check-commits.outputs.target_ref }}
            type=raw,value={{date 'YYYY-MM-DD'}}
            type=sha,prefix={{date 'YYYY-MM-DD'}}-

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./archon-source/${{ matrix.component.context }}
          file: ./archon-source/${{ matrix.component.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          annotations: |
            index:org.opencontainers.image.title=Archon ${{ matrix.component.name }}
            index:org.opencontainers.image.description=Archon ${{ matrix.component.name }} service - AI-powered development environment
            index:org.opencontainers.image.url=https://github.com/coleam00/Archon
            index:org.opencontainers.image.source=https://github.com/${{ env.UPSTREAM_REPO }}
            index:org.opencontainers.image.version=${{ needs.check-commits.outputs.target_ref }}
            index:org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            index:org.opencontainers.image.revision=${{ needs.check-commits.outputs.target_ref }}
            index:org.opencontainers.image.licenses=MIT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        if: github.event_name != 'pull_request'
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/archon-${{ matrix.component.name }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/archon-${{ matrix.component.name }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.component.name }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results-${{ matrix.component.name }}.sarif'
          category: 'trivy-${{ matrix.component.name }}'

      - name: Sign container image with cosign
        if: github.event_name != 'pull_request'
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          echo "$TAGS" | while IFS= read -r tag; do
            echo "Signing $tag@$DIGEST"
            cosign sign --yes "$tag@$DIGEST"
          done

  build-summary:
    needs: [check-commits, build-images]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate build summary
        run: |
          echo "## 🐳 Archon Docker Images Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Ref:** \`${{ needs.check-commits.outputs.target_ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ${{ needs.build-images.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-images.result }}" == "success" ]; then
            echo "### ✅ Successfully Built Images" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Component | Image |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Server | \`ghcr.io/${{ github.repository_owner }}/archon-server:latest\` |" >> $GITHUB_STEP_SUMMARY
            echo "| MCP | \`ghcr.io/${{ github.repository_owner }}/archon-mcp:latest\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Agents | \`ghcr.io/${{ github.repository_owner }}/archon-agents:latest\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Frontend | \`ghcr.io/${{ github.repository_owner }}/archon-frontend:latest\` |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔒 Security Features" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ SBOM (Software Bill of Materials) generated" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Build provenance attestation created" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Container images signed with cosign" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Vulnerability scanning with Trivy" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Multi-platform builds (amd64/arm64)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi